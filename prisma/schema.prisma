generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model SubTask {
  subtask_id Int      @id @default(autoincrement())
  title      String   @default("")
  state      Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  task_id    Int
  task       Task     @relation(fields: [task_id], references: [task_id], onDelete: Cascade)
}

model Task {
  task_id     Int       @id @default(autoincrement())
  title       String    @default("")
  description String    @default("")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  column_id   Int
  subTasks    SubTask[]
  column      Column    @relation(fields: [column_id], references: [column_id], onDelete: Cascade)
}

model Column {
  column_id Int      @id @default(autoincrement())
  title     String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  board_id  Int
  board     Board    @relation(fields: [board_id], references: [board_id], onDelete: Cascade)
  tasks     Task[]
}

model Board {
  board_id  Int      @id @default(autoincrement())
  title     String   @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user_id   Int
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  columns   Column[]
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  boards    Board[]
}
